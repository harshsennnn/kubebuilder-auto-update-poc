name: Update Kubebuilder Scaffold

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * 0' # Run weekly

jobs:
  update-scaffold:
    runs-on: ubuntu-latest

    steps:
      - name: Check out the repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up environment and dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl tar

      - name: Read Kubebuilder version from PROJECT file
        id: read_version
        run: |
          VERSION=$(grep "clientVersion" PROJECT | awk '{print $2}')
          echo "initial_version=$VERSION" >> $GITHUB_OUTPUT
          echo "Initial Version: $VERSION"

      - name: Download and install initial Kubebuilder version
        run: |
          curl -L https://github.com/kubernetes-sigs/kubebuilder/releases/download/${{ steps.read_version.outputs.initial_version }}/kubebuilder_${{ steps.read_version.outputs.initial_version }}_linux_amd64.tar.gz -o kubebuilder_initial.tar.gz
          tar -zxvf kubebuilder_initial.tar.gz
          sudo mv kubebuilder_${{ steps.read_version.outputs.initial_version }}_linux_amd64 /usr/local/kubebuilder_initial

      - name: Generate initial scaffold
        run: |
          mkdir scaffold_initial
          cp -r . scaffold_initial/
          cd scaffold_initial
          /usr/local/kubebuilder_initial/bin/kubebuilder init --domain=my.domain --repo=github.com/example/test-kubebuilder-poc
          cd ..

      - name: Get latest Kubebuilder version
        id: get_latest_version
        run: |
          LATEST=$(curl -s https://api.github.com/repos/kubernetes-sigs/kubebuilder/releases/latest | jq -r .tag_name)
          echo "latest_version=$LATEST" >> $GITHUB_OUTPUT
          echo "Latest Version: $LATEST"

      - name: Download and install latest Kubebuilder
        run: |
          curl -L https://github.com/kubernetes-sigs/kubebuilder/releases/download/${{ steps.get_latest_version.outputs.latest_version }}/kubebuilder_${{ steps.get_latest_version.outputs.latest_version }}_linux_amd64.tar.gz -o kubebuilder_latest.tar.gz
          tar -zxvf kubebuilder_latest.tar.gz
          sudo mv kubebuilder_${{ steps.get_latest_version.outputs.latest_version }}_linux_amd64 /usr/local/kubebuilder_latest

      - name: Generate updated scaffold
        run: |
          mkdir scaffold_updated
          cp -r . scaffold_updated/
          cd scaffold_updated
          /usr/local/kubebuilder_latest/bin/kubebuilder init --domain=my.domain --repo=github.com/example/test-kubebuilder-poc
          cd ..

      - name: Copy current project
        run: |
          mkdir scaffold_current
          cp -r . scaffold_current/

      - name: Copy updated scaffold (simulate overwrite)
        run: |
          cp -r scaffold_updated/* .
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add .
          git commit -m "Update scaffold using Kubebuilder ${{ steps.get_latest_version.outputs.latest_version }}" || echo "No changes to commit"

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v3
        with:
          commit-message: "Update scaffold to Kubebuilder ${{ steps.get_latest_version.outputs.latest_version }}"
          title: "Update scaffold to Kubebuilder ${{ steps.get_latest_version.outputs.latest_version }}"
          body: |
            This PR updates the Kubebuilder scaffold from ${{ steps.read_version.outputs.initial_version }} to ${{ steps.get_latest_version.outputs.latest_version }}.
          branch: kubebuilder-update-${{ steps.get_latest_version.outputs.latest_version }}
